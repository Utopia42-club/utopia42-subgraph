type Factory @entity{
    id: ID!
    factory: Bytes!
    verse: [Verse!]! @derivedFrom(field: "verse")
    # collection: [ERC721Contract!]! @derivedFrom(field: "collection")
    verseAddress: Bytes!
    collectionAddress: Bytes!
    owner: Account!
	creator: Account!
    createdAt: BigInt!
    blockNumber: BigInt!
}

type Verse @entity{
    id: ID!
    owner: Bytes!
    creator: Bytes!
    verse: Factory!
    lands:[Land!]! @derivedFrom(field: "contract")
    burnedLand:[BurnedLand!]! @derivedFrom(field: "verse")
}

type Land @entity {
    id: ID!
    contract: Verse!
    landId: BigInt!
    owner: Bytes!
    x1: BigInt!
    x2: BigInt!
    y1: BigInt!
    y2: BigInt!
    create_time: BigInt!
    update_time: BigInt!
    ipfsData: IpfsData
    isNFT: Boolean!
	transfers:[LandsTransfer!]! @derivedFrom(field: "land")
}

type LandsTransfer @entity {
	id: ID!
	from: Bytes!
	to: Bytes!
	timestamp: BigInt!
	land: Land!
}

type BurnedLand @entity {
    id: ID!
    contract: Bytes!
    landId: BigInt!
    time: BigInt!
	verse: Verse!
}

type Particle @entity {
    id: ID!
    contract: Bytes!
    x: BigInt!
    y: BigInt!
    z: BigInt!
    block: String!
    metaBlock: String
    metaBlockProperties: String
    ipfsData: IpfsData!
}

type IpfsData @entity {
    id: ID!
    loaded: Boolean
    particles: [Particle!]! @derivedFrom(field: "ipfsData")
}

type Account @entity {
	id: ID!
	asERC721: ERC721Contract
	ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
	ERC721operatorOwner: [ERC721Operator!]! @derivedFrom(field: "owner")
	ERC721operatorOperator: [ERC721Operator!]! @derivedFrom(field: "operator")
	ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
	ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
	asOwnable: Ownable
	ownerOf: [Ownable!]! @derivedFrom(field: "owner")
	ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "owner")
	events: [Event!]! @derivedFrom(field: "emitter")
}

type ERC721Contract @entity {
	id: ID!
    # collection: Factory!
	asAccount: Account!
	supportsMetadata: Boolean
	name: String
	symbol: String
	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
	operators: [ERC721Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}

type ERC721Token @entity {
	id: ID!
	contract: ERC721Contract!
	identifier: BigInt!
	owner: Account!
	approval: Account!
	uri: String
	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
}

type ERC721Operator @entity {
	id: ID!
	contract: ERC721Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}

type ERC721Transfer implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC721Contract!
	token: ERC721Token!
	from: Account!
	to: Account!
}

type Ownable @entity {
	id: ID!
	asAccount: Account!
	owner: Account!
	ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "contract")
}

type OwnershipTransferred implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Ownable!
	owner: Account!
}

interface Event {
	id: ID!
	transaction: Transaction!
	emitter: Account!
	timestamp: BigInt!
}

type Transaction @entity {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
