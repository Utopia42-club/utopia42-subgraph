// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LandCreated extends ethereum.Event {
  get params(): LandCreated__Params {
    return new LandCreated__Params(this);
  }
}

export class LandCreated__Params {
  _event: LandCreated;

  constructor(event: LandCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get landAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get collectionAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class UtopiaFactory__createLandResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class UtopiaFactory extends ethereum.SmartContract {
  static bind(address: Address): UtopiaFactory {
    return new UtopiaFactory("UtopiaFactory", address);
  }

  collections(param0: Address): Address {
    let result = super.call("collections", "collections(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_collections(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collections",
      "collections(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createLand(_owner: Address): UtopiaFactory__createLandResult {
    let result = super.call(
      "createLand",
      "createLand(address):(address,address)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return new UtopiaFactory__createLandResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_createLand(
    _owner: Address
  ): ethereum.CallResult<UtopiaFactory__createLandResult> {
    let result = super.tryCall(
      "createLand",
      "createLand(address):(address,address)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UtopiaFactory__createLandResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  lands(param0: Address): Address {
    let result = super.call("lands", "lands(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_lands(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("lands", "lands(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateLandCall extends ethereum.Call {
  get inputs(): CreateLandCall__Inputs {
    return new CreateLandCall__Inputs(this);
  }

  get outputs(): CreateLandCall__Outputs {
    return new CreateLandCall__Outputs(this);
  }
}

export class CreateLandCall__Inputs {
  _call: CreateLandCall;

  constructor(call: CreateLandCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateLandCall__Outputs {
  _call: CreateLandCall;

  constructor(call: CreateLandCall) {
    this._call = call;
  }

  get land(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get collection(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}
