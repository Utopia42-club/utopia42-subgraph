// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Land extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));

    this.set("contract", Value.fromBytes(Bytes.empty()));
    this.set("landId", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("x1", Value.fromBigInt(BigInt.zero()));
    this.set("x2", Value.fromBigInt(BigInt.zero()));
    this.set("y1", Value.fromBigInt(BigInt.zero()));
    this.set("y2", Value.fromBigInt(BigInt.zero()));
    this.set("create_time", Value.fromBigInt(BigInt.zero()));
    this.set("update_time", Value.fromBigInt(BigInt.zero()));
    this.set("isNFT", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Land entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Land must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Land", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Land | null {
    return changetype<Land | null>(store.get("Land", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get landId(): BigInt {
    let value = this.get("landId");
    return value!.toBigInt();
  }

  set landId(value: BigInt) {
    this.set("landId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get x1(): BigInt {
    let value = this.get("x1");
    return value!.toBigInt();
  }

  set x1(value: BigInt) {
    this.set("x1", Value.fromBigInt(value));
  }

  get x2(): BigInt {
    let value = this.get("x2");
    return value!.toBigInt();
  }

  set x2(value: BigInt) {
    this.set("x2", Value.fromBigInt(value));
  }

  get y1(): BigInt {
    let value = this.get("y1");
    return value!.toBigInt();
  }

  set y1(value: BigInt) {
    this.set("y1", Value.fromBigInt(value));
  }

  get y2(): BigInt {
    let value = this.get("y2");
    return value!.toBigInt();
  }

  set y2(value: BigInt) {
    this.set("y2", Value.fromBigInt(value));
  }

  get create_time(): BigInt {
    let value = this.get("create_time");
    return value!.toBigInt();
  }

  set create_time(value: BigInt) {
    this.set("create_time", Value.fromBigInt(value));
  }

  get update_time(): BigInt {
    let value = this.get("update_time");
    return value!.toBigInt();
  }

  set update_time(value: BigInt) {
    this.set("update_time", Value.fromBigInt(value));
  }

  get ipfsData(): string | null {
    let value = this.get("ipfsData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ipfsData(value: string | null) {
    if (!value) {
      this.unset("ipfsData");
    } else {
      this.set("ipfsData", Value.fromString(<string>value));
    }
  }

  get isNFT(): boolean {
    let value = this.get("isNFT");
    return value!.toBoolean();
  }

  set isNFT(value: boolean) {
    this.set("isNFT", Value.fromBoolean(value));
  }
}

export class Particle extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));

    this.set("contract", Value.fromBytes(Bytes.empty()));
    this.set("x", Value.fromBigInt(BigInt.zero()));
    this.set("y", Value.fromBigInt(BigInt.zero()));
    this.set("z", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromString(""));
    this.set("ipfsData", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Particle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Particle must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Particle", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Particle | null {
    return changetype<Particle | null>(store.get("Particle", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get x(): BigInt {
    let value = this.get("x");
    return value!.toBigInt();
  }

  set x(value: BigInt) {
    this.set("x", Value.fromBigInt(value));
  }

  get y(): BigInt {
    let value = this.get("y");
    return value!.toBigInt();
  }

  set y(value: BigInt) {
    this.set("y", Value.fromBigInt(value));
  }

  get z(): BigInt {
    let value = this.get("z");
    return value!.toBigInt();
  }

  set z(value: BigInt) {
    this.set("z", Value.fromBigInt(value));
  }

  get block(): string {
    let value = this.get("block");
    return value!.toString();
  }

  set block(value: string) {
    this.set("block", Value.fromString(value));
  }

  get metaBlock(): string | null {
    let value = this.get("metaBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metaBlock(value: string | null) {
    if (!value) {
      this.unset("metaBlock");
    } else {
      this.set("metaBlock", Value.fromString(<string>value));
    }
  }

  get metaBlockProperties(): string | null {
    let value = this.get("metaBlockProperties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metaBlockProperties(value: string | null) {
    if (!value) {
      this.unset("metaBlockProperties");
    } else {
      this.set("metaBlockProperties", Value.fromString(<string>value));
    }
  }

  get ipfsData(): string {
    let value = this.get("ipfsData");
    return value!.toString();
  }

  set ipfsData(value: string) {
    this.set("ipfsData", Value.fromString(value));
  }
}

export class IpfsData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("loaded", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IpfsData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IpfsData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IpfsData", id.toString(), this);
    }
  }

  static load(id: string): IpfsData | null {
    return changetype<IpfsData | null>(store.get("IpfsData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loaded(): boolean {
    let value = this.get("loaded");
    return value!.toBoolean();
  }

  set loaded(value: boolean) {
    this.set("loaded", Value.fromBoolean(value));
  }

  get particles(): Array<Bytes> {
    let value = this.get("particles");
    return value!.toBytesArray();
  }

  set particles(value: Array<Bytes>) {
    this.set("particles", Value.fromBytesArray(value));
  }
}
